#pragma once
// #include "rpc.h"
#include <mutex>
#ifndef STAND_ALONE_RUN
const std::string kdonnaHostname = "129.215.165.54";
// const std::string kdonnaHostname = "129.215.91.68";
// const std::string kmarthaHostname = "129.215.165.53";
const std::string kmarthaHostname = "129.215.165.58";
const std::string kroseHostname = "129.215.165.52";
const std::string leader_address = kdonnaHostname;
const std::string follower_address_1 = kroseHostname;
const std::string follower_address_2 = kmarthaHostname;

constexpr uint16_t kUDPPort = 31850;
constexpr uint16_t kNumThreads = 8;
/* worker thread(s) serialize the writes */
constexpr uint16_t kNumWorkerThreads = 1;
constexpr uint16_t kClusterSize = 3;

constexpr int kReqAppendEntries = 1;
constexpr int kReqUpdateCommitIndex = 2;
constexpr int kReqTerminateFollowers = 3;
constexpr int kForwardPut = 4;
constexpr int kForwardGet = 5;
constexpr int kReqNbReqs = 6;

constexpr int kQueueSize = 2;
constexpr int kBatchSize = 200000;
constexpr int kReqBatchSz = 10;
static constexpr int kMsgSize = 256;
constexpr int kValueSize = kMsgSize;

// static uint64_t kTraceSize =  1000000;
static uint64_t kTraceSize = 1000000;
static uint64_t kWorkloadSize = 1000000; //2e6
//    40e6; // this is the workload size -- threads will replay same trace size
static int kReadPerMille = 500;

static int64_t nb_reqs = (kWorkloadSize / kNumThreads);

#if 0
static void sm_handler(int local_session, erpc::SmEventType, erpc::SmErrType,
                       void *) {}
#endif

#endif
